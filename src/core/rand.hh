#ifndef DONKEY_KONG_1981_RAND_HH
#define DONKEY_KONG_1981_RAND_HH

#include <random>
#include <cstdint>
#include <array>

namespace rnd
{
  //
  // xorwow generator with API modelled on the std generators in the numerics library thus
  // making it compatible with std distributions.
  //
  class xorwow
  {
  public:
    using result_type = uint32_t;

    static constexpr int state_size = 6;
    using state_type = std::array<result_type, state_size>;

    //
    // state must be initialized to not all be 0 in the first 4 words.
    //
    constexpr static state_type default_seed {
      123456789, 975312468, 815652528, 175906542, 0, 0
    };

    xorwow() noexcept : _state {default_seed}{};

    explicit xorwow(result_type value) noexcept;
    explicit xorwow(const state_type& seed) noexcept;
    explicit xorwow(std::seed_seq& seq) noexcept;

    //
    // reinitializes the state to the default_seed.
    //
    void seed();

    //
    // reinitializes the state to the default_seed then sets the 'e' state to seed.
    //
    void seed(result_type seed);

    //
    // reinitializes the full state to seed.
    //
    void seed(state_type seeds);

    //
    // reinitializes the state to seeds generated from the seed_seq.
    //
    void seed(std::seed_seq& seq);

    //
    // returns a psuedo random number within range [min(), max()].
    //
    result_type operator()();

    //
    // advances the internal state by z times.
    //
    void discard(unsigned long long z);

    //
    // returns min/max values potentially generated by the engine.
    //
    static constexpr result_type min();
    static constexpr result_type max();

    //
    // accessors; replacement for the stream operator overloads used to access internal
    // state within the std library engines.
    //
    [[nodiscard]] const state_type& getState() const {return _state;}
    void setState(const state_type& state) {_state = state;}

    //
    // returns the number of unsigned 32-bit int values required to fully seed the engine.
    //
    [[nodiscard]] int32_t required_seed_size() const {return state_size - 2;}

  private:
    state_type _state;
  };

  //
  // USAGE NOTE:
  //
  // To seed/initialize this module you must use the xorwow API on the 'generator' xorwow
  // instance.
  //
  // Even if you do not seed the generator it will be default constructed with the default
  // seed.
  //

  //
  // The RNG used internally within all module functions.
  //
  extern xorwow generator;

  //
  // Two engines are equal if their internal states are equivalent.
  //
  bool operator==(const xorwow& lhs, const xorwow& rhs);
  bool operator!=(const xorwow& lhs, const xorwow& rhs);

  //
  // returns a random signed integer uniformly distributed on the closed interval [li, hi].
  //
  int uniformSignedInt(int lo, int hi);

  //
  // returns a random unsigned integer uniformly distributed on the closed interval [li, hi].
  //
  unsigned int uniformUnsignedInt(unsigned int lo, unsigned int hi);

  //
  // returns a random real value uniformly distributed on the interval [li, hi).
  //
  double uniformReal(double lo, double hi);

}

#endif //DONKEY_KONG_1981_RAND_HH